name: 多平台打包并上传到Release中

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-2022
    permissions:
      contents: write

    steps:
      # 1. 安装 Chocolatey（如果未安装）
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      # 2. 安装 WiX Toolset
      - name: Install WiX Toolset
        run: |
          choco install wixtoolset -y --force

      - name: Set WiX environment variables
        run: |
          echo "WIX=C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $env:GITHUB_ENV
          echo "$env:WIX" >> $env:GITHUB_PATH

      # 3. 验证 WiX Toolset 安装
      - name: Verify WiX Toolset installation
        run: |
          light.exe -version
          Write-Output "WiX Toolset version verified."

      # 4. 设置临时目录
      - name: Set temporary directory
        run: |
          $tempDir = "C:\temp"
          New-Item -ItemType Directory -Path $tempDir -Force
          echo "TEMP=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TMP=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "JPACKAGE_TEMP=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 5. 清理临时目录
      - name: Clean temporary directory
        run: |
          $tempDir = "C:\temp\jdk.jpackage*"
          if (Test-Path -Path $tempDir) {
              Remove-Item -Recurse -Force -Path $tempDir
          }
          Write-Output "Temporary directory cleaned."

      # 6. 验证权限
      - name: Verify permissions
        run: |
          $testFile = "$env:TEMP\test.txt"
          "Test content" | Out-File -FilePath $testFile -Encoding utf8
          if (Test-Path -Path $testFile) {
              Write-Output "Permissions verified: $testFile"
          } else {
              Write-Output "Failed to verify permissions: $testFile"
              exit 1
          }

      # 7. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 8. 提取不含有 'v' 开头的标签字符
      - name: Extract version without 'v'
        run: |
          $TAG_NAME = "${{ github.event.inputs.tag_name }}"
          Write-Output "Input tag name: $TAG_NAME"
          if ($TAG_NAME.StartsWith("v")) {
            $VERSION = $TAG_NAME.Substring(1)
          } else {
            $VERSION = $TAG_NAME
          }
          Write-Output "Extracted version: $VERSION"
          echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 9. 设置 Java 23 (Oracle OpenJDK 23.0.1 - x64)
      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '23.0.1'
          architecture: 'x64'

      # 10. 验证 Java 版本
      - name: Verify Java version
        run: java -version

      # 11. 赋予 Gradle 执行权限
      - name: Make Gradle executable
        run: icacls gradlew /grant Everyone:F

      # 12. 运行 Gradle 任务，生成 .exe 文件（启用详细日志）
      - name: Run Gradle packageReleaseExe
        # run: ./gradlew packageReleaseExe --debug
        run: |
          ./gradlew packageReleaseDistributionForCurrentOs -Pjpackage.installerOptions="--win-wxs-options -dProductCodepage=65001"
        continue-on-error: true

      # 13. 捕获标准输出日志并输出到 GitHub Actions 日志
      - name: Capture and output standard log
        run: |
          $stdoutLog = Get-ChildItem -Path "D:\a\ComposeApp-projects\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe" -Filter "*-out.txt" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($stdoutLog) {
              Write-Output "Standard output log content:"
              Get-Content -Path $stdoutLog.FullName
          } else {
              Write-Output "No standard output log found."
          }
        continue-on-error: true

      # 14. 捕获错误日志并输出到 GitHub Actions 日志
      - name: Capture and output error log
        run: |
          $stderrLog = Get-ChildItem -Path "D:\a\ComposeApp-projects\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe" -Filter "*-err.txt" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($stderrLog) {
              Write-Output "Error log content:"
              Get-Content -Path $stderrLog.FullName
          } else {
              Write-Output "No error log found."
          }
        continue-on-error: true

      # 15. 上传日志文件为构建产物
      - name: Upload logs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            D:\a\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe\*-out.txt
            D:\a\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe\*-err.txt

      # 16. 保存 .exe 文件路径
      - name: Save EXE path
        run: |
          echo "EXE_PATH=composeApp\build\customOutputDir\main-release\exe\multitimer-${{ env.VERSION }}.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 17. 上传 .exe 文件为构建产物
      - name: Upload EXE as artifact
        uses: actions/upload-artifact@v3
        with:
          name: 计时器.exe
          path: ${{ env.EXE_PATH }}
