name: 多平台打包并上传到Release中

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-2022
    permissions:
      contents: write

    steps:
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install WiX Toolset
        run: |
          choco install wixtoolset -y --force

      - name: Verify WiX Toolset installation
        run: |
          light.exe -version
          Write-Output "WiX Toolset version verified."

      - name: Set temporary directory
        run: |
          $tempDir = "C:\temp"
          New-Item -ItemType Directory -Path $tempDir -Force
          echo "TEMP=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TMP=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "JPACKAGE_TEMP=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify permissions
        run: |
          $testFile = "$env:TEMP\test.txt"
          "Test content" | Out-File -FilePath $testFile -Encoding utf8
          if (Test-Path -Path $testFile) {
              Write-Output "Permissions verified: $testFile"
          } else {
              Write-Output "Failed to verify permissions: $testFile"
              exit 1
          }

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version without 'v'
        run: |
          $TAG_NAME = "${{ github.event.inputs.tag_name }}"
          Write-Output "Input tag name: $TAG_NAME"
          if ($TAG_NAME.StartsWith("v")) {
            $VERSION = $TAG_NAME.Substring(1)
          } else {
            $VERSION = $TAG_NAME
          }
          Write-Output "Extracted version: $VERSION"
          echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '23.0.1'
          architecture: 'x64'

      - name: Verify Java version
        run: java -version

      - name: Make Gradle executable
        run: icacls gradlew /grant Everyone:F

      - name: Run Gradle packageReleaseExe
        run: ./gradlew packageReleaseExe --debug -Pwix.verbose=true -Pwix.iceValidation="ICE27;ICE30"
        continue-on-error: true

#      - name: Capture and output standard log
#        run: |
#          $stdoutLog = Get-ChildItem -Path "D:\a\ComposeApp-projects\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe" -Filter "*-out.txt" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
#          if ($stdoutLog) {
#              Write-Output "Standard output log content:"
#              Get-Content -Path $stdoutLog.FullName
#          } else {
#              Write-Output "No standard output log found."
#          }
#
#      - name: Capture and output error log
#        run: |
#          $stderrLog = Get-ChildItem -Path "D:\a\ComposeApp-projects\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe" -Filter "*-err.txt" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
#          if ($stderrLog) {
#              Write-Output "Error log content:"
#              Get-Content -Path $stderrLog.FullName
#              echo "ERROR_LOG_PATH=$($stderrLog.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
#          } else {
#              Write-Output "No error log found."
#          }

      - name: Upload logs and artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            D:\a\ComposeApp-projects\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe\*-out.txt
            D:\a\ComposeApp-projects\ComposeApp-projects\composeApp\build\compose\logs\packageReleaseExe\*-err.txt
            composeApp\build\customOutputDir\main-release\exe\*.exe

      - name: Fail the job if Gradle task failed
        if: ${{ failure() }}
        run: |
          Write-Output "Gradle task failed. Check the logs for more details."
          exit 1

      - name: Save EXE path
        run: |
          echo "EXE_PATH=composeApp\build\customOutputDir\main-release\exe\计时器倒计时-${{ env.VERSION }}.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload EXE as artifact
        uses: actions/upload-artifact@v3
        with:
          name: 计时器.exe
          path: ${{ env.EXE_PATH }}